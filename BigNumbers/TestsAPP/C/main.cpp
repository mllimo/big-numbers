#define BOOST_TEST_MODULE IntegerTests
#include <boost/test/unit_test.hpp>

#include <IntegerLib/H/Integer.h>

BOOST_AUTO_TEST_CASE(integer_numeric_constructor_01) {
    big::Integer a(1);
    std::string r = "1";
    BOOST_CHECK_EQUAL(r, a.ToString());
}

BOOST_AUTO_TEST_CASE(integer_numeric_constructor_02) {
    big::Integer a(INT64_MAX);
    std::string r = std::to_string(INT64_MAX);
    BOOST_CHECK_EQUAL(r, a.ToString());  
}

BOOST_AUTO_TEST_CASE(integer_numeric_constructor_03) {
    big::Integer a(INT64_MIN);
    std::string r = std::to_string(INT64_MIN);
    BOOST_CHECK_EQUAL(r, a.ToString());
}

BOOST_AUTO_TEST_CASE(integer_add_01) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    std::string r = "20000000000000000000000000000000";
    BOOST_CHECK_EQUAL(r, a.Add(b).ToString());
}

BOOST_AUTO_TEST_CASE(integer_add_02) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-10000000000000000000000000000000");
    big::Integer c("0");
    BOOST_CHECK(c.IsEq(a.Add(b)));
}

BOOST_AUTO_TEST_CASE(integer_add_03) {
    big::Integer a("-10000000000000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    big::Integer r;
    BOOST_CHECK(r.IsEq(a.Add(b)));
}

BOOST_AUTO_TEST_CASE(integer_add_04) {
    big::Integer a("-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    big::Integer b("1");
    big::Integer r( "-99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
    BOOST_CHECK(r.IsEq(a.Add(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_01) {
    big::Integer a("5");
    big::Integer b("3");
    big::Integer r("15");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_02) {
    big::Integer a("10");
    big::Integer b("10000000000000000000000000000");
    big::Integer r("100000000000000000000000000000");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_03) {
    big::Integer a("1");
    big::Integer b("123456789888888888888888888888123456789888888888888888888888");
    big::Integer r("123456789888888888888888888888123456789888888888888888888888");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_04) {
    big::Integer a("-1");
    big::Integer b("123456789888888888888888888888123456789888888888888888888888");
    big::Integer r("-123456789888888888888888888888123456789888888888888888888888");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_05) {
    big::Integer a("-1");
    big::Integer b("-123456789888888888888888888888123456789888888888888888888888");
    big::Integer r("123456789888888888888888888888123456789888888888888888888888");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_06) {
    big::Integer a("11111111111111111111111111111");
    big::Integer b("30");
    big::Integer r("333333333333333333333333333330");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_Mult_07) {
    big::Integer a("11111111111111111111111111111");
    big::Integer b("333333333333333");
    big::Integer r("3703703703703699999999999999962962962962963");
    BOOST_CHECK(r.IsEq(a.Mult(b)));
}

BOOST_AUTO_TEST_CASE(integer_mix_op_01) {
    big::Integer a("-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    big::Integer b("1");
    auto ab = a.Add(b);

    big::Integer c("333333333333333");
    big::Integer r("-33333333333333299999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999666666666666667");
    BOOST_CHECK(r.IsEq(c.Mult(ab)));
}

BOOST_AUTO_TEST_CASE(integer_mix_op_02) {
    big::Integer a("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    big::Integer b("1111111111111111111111111111111111");
    auto ab = a.Add(b);

    big::Integer c("333333333333333");
    big::Integer r("33333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000370370370370369999999999999999999962962962962963");
    BOOST_CHECK(r.IsEq(c.Mult(ab)));
}

BOOST_AUTO_TEST_CASE(integer_gt_01) {
    big::Integer a("-10000000000000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(false, a.IsGT(b));
}

BOOST_AUTO_TEST_CASE(integer_gt_02) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsGT(b));
}

BOOST_AUTO_TEST_CASE(integer_gt_03) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-1000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsGT(b));
}

BOOST_AUTO_TEST_CASE(integer_gt_04) {
    big::Integer a("-1000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(false, a.IsGT(b));
}

BOOST_AUTO_TEST_CASE(integer_gte_01) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsGTE(b));
}

BOOST_AUTO_TEST_CASE(integer_gte_02) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsGTE(b));
}

BOOST_AUTO_TEST_CASE(integer_lt_01) {
    big::Integer a("-10000000000000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsLT(b));
}

BOOST_AUTO_TEST_CASE(integer_lt_02) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(false, a.IsLT(b));
}

BOOST_AUTO_TEST_CASE(integer_lt_03) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-1000000000000000000000");
    BOOST_CHECK_EQUAL(false, a.IsLT(b));
}

BOOST_AUTO_TEST_CASE(integer_lt_04) {
    big::Integer a("-1000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsLT(b));
}

BOOST_AUTO_TEST_CASE(integer_lte_01) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(true, a.IsLTE(b));
}

BOOST_AUTO_TEST_CASE(integer_lte_02) {
    big::Integer a("10000000000000000000000000000000");
    big::Integer b("-10000000000000000000000000000000");
    BOOST_CHECK_EQUAL(false, a.IsLTE(b));
}

BOOST_AUTO_TEST_CASE(integer_eq_01) {
    big::Integer a("0");
    big::Integer b("-0");
    BOOST_CHECK_EQUAL(true, a.IsEq(b));
}
